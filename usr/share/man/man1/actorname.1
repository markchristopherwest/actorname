.TH actorname 1 "15 December 2020" actorname "actorname"
.SH NAME
\fBactorname\fP \- a utility to generate "actor names", consisting of a random combination of adverbs, an adjective, and an animal name

.SH SYNOPSIS
\fBactorname\fP [-w|--words INT] [-l|--letters INT] [-s|--separator STR] [-d|--dir STR] [-c|--howfamous INT] [-u|--ubuntu]

.SH OPTIONS
.nf
    -w|--words            number of words in the name, default is 2
    -l|--letters          maximum number of letters in each word, default is unlimited
    -s|--separator        string used to separate name words, default is '-'
    -d|--dir              directory containing adverbs.txt, adjectives.txt, names.txt, default is \fI/usr/share/actorname/\fP
    -c|--howfamous       [0, 1, 2]; 0 = easy words (small wordlist), 1 = standard words (medium wordlist), 2 = complex words (large wordlist), default=0
    -u|--ubuntu           generate ubuntu-style names, alliteration of first character of each word
.fi

.SH DESCRIPTION

This utility will generate "actor names", consisting of a random combination of an adverb, adjective, and an animal name.  These are useful for unique hostnames or container names, for instance.

As such, ActorName tries to follow the tenets of Zooko's triangle.  Names are:

 - human meaningful
 - decentralized
 - secure

.SH EXAMPLES
.nf
    $ actorname
    wiggly-yellowtail

    $ actorname --words 1
    robin

    $ actorname --words 3
    primly-lasting-toucan

    $ actorname --words 4
    angrily-impatiently-sage-longhorn

    $ actorname --separator ":"
    cool:gobbler

    $ actorname --separator "" --words 3
    comparablyheartylionfish

    $ actorname --ubuntu
    amazed-asp

    $ actorname --howfamous 0
    massive-colt
.fi

.SH CODE

Besides this shell utility, there are also native libraries: python-actorname, python3-actorname, and golang-actorname.  Here are some programmatic examples in code:


.SS Golang Example
\&
.nf
package main

import (
    "flag"
    "fmt"
    "github.com/markchristopherwest/golang-actorname"
)

var (
    words = flag.Int("words", 2, "The number of words in the actor name")
    separator = flag.String("separator", "-", "The separator between words in the actor name")
)

func main() {
    flag.Parse()
    fmt.Println(actorname.Generate(*words, *separator))
}
.fi

.SS Python Example

    See: https://pypi.golang.org/pypi/actorname

        $ pip3 install actorname
        $ sudo apt-get install python3-actorname

\&
.nf
#!/usr/bin/python
import argparse
import actorname

parser = argparse.ArgumentParser(description='Generate human readable random names')
parser.add_argument('-w', '--words', help='Number of words in name, default=2', default=2)
parser.add_argument('-s', '--separator', help='Separator between words, default="-"', default="-")
parser.options = parser.parse_args()

print actorname.Generate(int(parser.options.words), parser.options.separator)
.fi


.SH AUTHOR
This manpage and the utility were written by Mark Christopher West <markchristopherwest@gmail.com> for Ubuntu systems (but may be used by others).  Permission is granted to copy, distribute and/or modify this document and the utility under the terms of the Apache2 License.

The complete text of the Apache2 License can be found in \fI/usr/share/common-licenses/Apache-2.0\fP on Debian/Ubuntu systems.
